# -*- coding: utf-8 -*-
"""Interdisciplinary

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FE4Ec_ddwPwGLF-JL07phBGXCwDqmQNG
"""

import numpy as np
from IPython.display import Audio, display
from scipy.io import wavfile
import matplotlib.pyplot as plt

def get_piano_notes():   
    # White keys are in Uppercase and black keys (sharps) are in lowercase
    octave = ['C', 'c', 'D', 'd', 'E', 'F', 'f', 'G', 'g', 'A', 'a', 'B'] 
    base_freq = 440 #Frequency of Note A4
    keys = np.array([x+str(y) for y in range(0,9) for x in octave])
    # Trim to standard 88 keys
    start = np.where(keys == 'A0')[0][0]
    end = np.where(keys == 'C8')[0][0]
    keys = keys[start:end+1]
    
    note_freqs = dict(zip(keys, [2**((n+1-49)/12)*base_freq for n in range(len(keys))]))
    note_freqs[''] = 0.0 # stop
    return note_freqs

get_piano_notes()

filename = "hpd.wav"

display(Audio(filename, autoplay=True))  # plays ok

# Load data from wav file
sample_rate, middle_c = wavfile.read(filename)
print("Sample rate:", sample_rate)

C_start = 3.5
C_end = 4.5

start = int(C_start * sample_rate)
end = int(C_end * sample_rate)

amplitude = middle_c.T[1]
time = np.linspace(0, len(amplitude)/sample_rate, num=len(amplitude))

def plot_frequency_fft(amplitude, title):
  #FFT
  t = np.arange(len(amplitude))
  freq = np.fft.fftfreq(t.shape[-1])*sample_rate
  sp = np.fft.fft(amplitude) 

  plt.figure(figsize=(17,9)) 
  plt.style.use('seaborn-whitegrid')
  plt.xlabel('Frequency (Hz)')
  plt.ylabel('Amplitude')
  plt.title(title)
  plt.plot(freq, abs(sp.real), color = "#558271")
  plt.xlim([0, 2000])
  plt.show()

plot_frequency_fft(amplitude, "Spectrum of song")
plot_frequency_fft(amplitude[start:end], "Spectrum of C part of song (beginning)")

def plot_signal(time, amplitude, title):
  plt.figure(figsize=(17,9)) 
  plt.style.use('seaborn-whitegrid')
  plt.xlabel('Time (s)')
  plt.ylabel('Amplitude')
  plt.title(title)
  plt.plot(time, amplitude, color = "#558271")
  amplitude_test = amplitude[::sample_rate]
  time_test = time[::sample_rate]
  plt.plot(time_test, amplitude_test, color = "#b52f67")
  plt.show()

# Plot sound wave
plot_signal(time, amplitude, "Song signal")