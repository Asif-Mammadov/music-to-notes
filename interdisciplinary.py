# -*- coding: utf-8 -*-
"""Interdisciplinary

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FE4Ec_ddwPwGLF-JL07phBGXCwDqmQNG
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np

def get_piano_notes():   
    # White keys are in Uppercase and black keys (sharps) are in lowercase
    octave = ['C', 'c', 'D', 'd', 'E', 'F', 'f', 'G', 'g', 'A', 'a', 'B'] 
    base_freq = 440 #Frequency of Note A4
    keys = np.array([x+str(y) for y in range(0,9) for x in octave])
    # Trim to standard 88 keys
    start = np.where(keys == 'A0')[0][0]
    end = np.where(keys == 'C8')[0][0]
    keys = keys[start:end+1]
    
    note_freqs = dict(zip(keys, [2**((n+1-49)/12)*base_freq for n in range(len(keys))]))
    note_freqs[''] = 0.0 # stop
    return note_freqs

get_piano_notes()

from IPython.display import Audio, display

sound_hey = "hpd.wav"

display(Audio(sound_hey, autoplay=True))  # plays ok

from scipy.io import wavfile
import matplotlib.pyplot as plt
plt.style.use('seaborn-dark')

# Load data from wav file
sample_rate, middle_c = wavfile.read('/content/drive/MyDrive/Interdisciplinary (1)/1/hpd.wav')

print("Sample rate:", sample_rate)
a = middle_c.T[0]
t = np.linspace(0, len(a)/sample_rate, num=len(a))
len_a = len(a)
print(len_a)
a_test = a[::sample_rate]
t_test = t[::sample_rate]
b = middle_c.T[1]
# # Plot sound wave
plt.plot(t, a)
plt.plot(t_test, a_test)
# plt.plot(b)
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.grid()

# wavfile.write("new_hpd.wav", sample_rate, a)

# display(Audio("new_hpd.wav", autoplay=True))  # plays ok

fig, ax = plt.subplots()
t_start = 3.5
t_end = 4.5

start = np.int(t_start * sample_rate)
end = np.int(t_end * sample_rate)
ax.plot(t[start:end:500], a[start:end:500]) # looks it's C note

import numpy as np
from scipy.io import wavfile
import matplotlib.pyplot as plt

def plot_frequency_fft(amplitude, title):
  #FFT
  t = np.arange(len(amplitude))
  freq = np.fft.fftfreq(t.shape[-1])*sample_rate
  sp = np.fft.fft(amplitude) 

  plt.figure(figsize=(17,9)) 
  plt.style.use('seaborn-whitegrid')
  plt.xlabel('Frequency (Hz)')
  plt.ylabel('Amplitude')
  plt.title(title)
  plt.plot(freq, abs(sp.real), color = "#558271")
  plt.xlim([0, 2000])
  plt.show()


plot_frequency_fft(a, "Spectrum of song")
plot_frequency_fft(a[start:end], "Spectrum of C part of song (beginning)")

def plot_signal(time, amplitude, title):
  plt.figure(figsize=(17,9)) 
  plt.style.use('seaborn-whitegrid')
  plt.xlabel('Time (s)')
  plt.ylabel('Amplitude')
  plt.title(title)
  plt.plot(time, amplitude, color = "#558271")
  a_test = a[::sample_rate]
  t_test = t[::sample_rate]
  plt.plot(t_test, a_test, color = "#b52f67")
  plt.show()

# Plot sound wave
plot_signal(t, a, "Song signal")